services:
  pihole:
    container_name: pihole
    image: "pihole/pihole:2025.04.0"
    ports:
      # DNS Ports
      - "53:53/tcp"
      - "53:53/udp"

      # Default HTTP Port
      - "8081:80/tcp"

      # Default HTTPS Port. FTL will generate a self-signed certificate
      # - "443:443/tcp"

      # Uncomment the below if using Pi-hole as your DHCP Server
      # - "67:67/udp"

    # Volumes store your data betrweern container upgrades
    volumes:
      # For persisting Pi-hole's databases and common configuration file
      - "./pihole/etc-pihole:/etc/pihole"
    environment:
      # Set the appropriate timezone for your location
      TZ: ${TZ}

      # Set a password to access the web interfaces
      FTLCONF_webserver_api_password: ${PIHOLE_PASSWORD}
    #cap_add:
      # See https://github.com/pi-hole/docker-pi-hole#note-on-capabilities
      # Required if you are using Pi-hole as your DHCP server, else not needed
     # - NET_ADMIN
    restart: unless-stopped
    networks:
      - npm_network

  prometheus:
    container_name: prometheus
    image: "prom/prometheus:latest"
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    volumes:
      - "./prometheus/:/etc/prometheus"
      - "prometheus_data:/prometheus"
    networks:
      - npm_network

  node-exporter:
    container_name: node-exporter
    image: "prom/node-exporter:latest"
    restart: unless-stopped
    ports:
      - "9100:9100"
    command:
      - "--path.procfs=/host/proc"
      - "--path.rootfs=/rootfs"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
      - "--collector.processes"
    volumes:
      # Mount necessary path from the host into the container in read-only mode
      - "/proc:/host/proc:ro"
      - "/sys:/host/sys:ro"
      - "/:/rootfs:ro"
    networks:
      - npm_network

  cadvisor:
    container_name: cadvisor
    image: "gcr.io/cadvisor/cadvisor:v0.47.1"
    restart: unless-stopped
    ports:
      - "8082:8080"
    privileged: true # Access to cgroups
    command:
      - "--disable_metrics=percpu,sched,tcp,udp,disk,diskIO"
    volumes:
      - "/:/rootfs:ro"
      - "/var/run:/var/run:ro"
      - "/sys:/sys:ro"
      - "/var/lib/docker/:/var/lib/docker:ro"
      - "/dev/disk/:/dev/disk:ro"
    networks:
      - npm_network

  grafana:
    container_name: grafana
    image: "grafana/grafana-oss"
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      # Set configuration for Grafana provisioning
      - "./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources"
      - "./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards"
      - "grafana_data:/var/lib/grafana"
    networks:
      - npm_network

  nginx:
    container_name: nginx
    image: "jc21/nginx-proxy-manager:latest"
    restart: unless-stopped
    ports:
      - "80:80"
      - "81:81"
      - "443:443"
    volumes:
      - "./nginx/data:/data"
      - "./nginx/letsencrypt:/etc/letsencrypt"
    networks:
      - npm_network

  homarr:
    container_name: homarr
    image: "ghcr.io/homarr-labs/homarr:latest"
    ports:
      - "8080:7575"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock" # Optional, only for Docker integration
      - "./homarr/appdata:/appdata"
    environment:
      - SECRET_ENCRYPTION_KEY=${SECRET_ENCRYPTION_KEY}
      - TZ=${TZ}
    networks:
      - npm_network

  portainer:
    container_name: portainer
    image: "portainer/portainer-ce:latest"
    ports:
#      - "8000:8000"
#      - "9443:9443" # Web UI HTTPS
       - "9000:9000" # Web UI HTTP
    command: "-H unix:///var/run/docker.sock" # Not Enable TLS 9443
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "portainer_data:/data"
    restart: always
    networks:
      - npm_network

networks:
  npm_network:
    name: npm_network
    driver: bridge

volumes:
  prometheus_data:
  grafana_data:
  portainer_data:
