# -- Default values for homarr
# -- Declare variables to be passed into your templates.

# -- Number of replicas
replicaCount: 1

# -- `strategyType` specifies the strategy used to replace old Pods by new ones.
# `strategyType` can be `"Recreate"` or `"RollingUpdate"`.
# `"RollingUpdate"` is the default value and updates Pods in a rolling update fashion.
# `"Recreate"` will kill all existing Pods before new ones are created.
# The `"Recreate"` strategy is necessary when persistent volume's `accessMode`
# is set to `"ReadWriteOnce"` when using `helm upgrade`, as pod volume attachments
# to an existing PersistentVolumeClaim need to be cleared before a new pod can attach to it.
strategyType: RollingUpdate

image:
  # -- Image repository
  repository: ghcr.io/homarr-labs/homarr
  # -- Image pull policy
  pullPolicy: IfNotPresent
  # -- Overrides the image tag whose default is the chart appVersion
  tag: "v1.37.0"

env:
  # -- Your local time zone
  TZ: "Europe/Athens"
  # -- Enabled authentication methods. Multiple providers can be enabled with by separating them with , (ex. AUTH_PROVIDERS=credentials,oidc, it is highly recommended to just enable one provider).
  AUTH_PROVIDERS: "credentials"
  # -- URL to redirect to after clicking logging out.
  AUTH_LOGOUT_REDIRECT_URL:
  # -- Time for the session to time out. Can be set as pure number, which will automatically be used in seconds, or followed by s, m, h or d for seconds, minutes, hours or days. (ex: "30m")
  AUTH_SESSION_EXPIRY_TIME: "30d"
  # -- URI of your LDAP server
  AUTH_LDAP_URI:
  # -- Base dn of your LDAP server
  AUTH_LDAP_BASE:
  # -- User used for finding users and groups
  AUTH_LDAP_BIND_DN:
  # -- Attribute used for username
  AUTH_LDAP_USERNAME_ATTRIBUTE: "uid"
  # -- Attribute used for mail field
  AUTH_LDAP_USER_MAIL_ATTRIBUTE: "mail"
  # -- Class used for querying groups
  AUTH_LDAP_GROUP_CLASS: "groupOfUniqueNames"
  # -- Attribute used for querying group member
  AUTH_LDAP_GROUP_MEMBER_ATTRIBUTE: "member"
  # -- User attribute used for comparing with group member
  AUTH_LDAP_GROUP_MEMBER_USER_ATTRIBUTE: "dn"
  # -- LDAP search scope between base, one or sub
  AUTH_LDAP_SEARCH_SCOPE: "base"
  # -- Extra arguments for user search filter (& based)
  AUTH_LDAP_USERNAME_FILTER_EXTRA_ARG:
  # -- Extra arguments for user's groups search filter (& based)
  AUTH_LDAP_GROUP_FILTER_EXTRA_ARG:
  # -- Issuer URI of OIDC provider without trailing slash (/)
  AUTH_OIDC_ISSUER:
  # -- Display name of provider (in login screen)
  AUTH_OIDC_CLIENT_NAME: "OIDC"
  # -- Automatically redirect to OIDC login
  AUTH_OIDC_AUTO_LOGIN: "false"
  # -- Override the OIDC scopes
  AUTH_OIDC_SCOPE_OVERWRITE: "openid email profile groups"
  # -- Attribute used for groups (roles) claim
  AUTH_OIDC_GROUPS_ATTRIBUTE: "groups"
  # -- Overwrite name attribute. By default, it will use preferred_username if it does not contain a @ and otherwise name.
  AUTH_OIDC_NAME_ATTRIBUTE_OVERWRITE:

database:
  # -- Enable external database
  externalDatabaseEnabled: false
  # -- Database migration configuration.
  # DB_MIGRATIONS_DISABLED Set to `true` to disable database migrations.
  # Migrations are enabled by default (`false`).
  migrationEnabled: true

# Sensitive values that need to be passed in through environment variables should use kubernetes secrets. In order
# to use this, create the secret in your target namespace before applying this helm chart. If you really want to,
# you CAN just put these in the env block above, but that is not recommended.
envSecrets:
  # The name of Auth OIDC existing secret
  authOidcCredentials:
    # -- Name of existing secret containing OIDC credentials
    existingSecret: "auth-oidc-secret"
    # -- ID of OIDC client (application) secret key
    oidcClientId: "oidc-client-id"
    # -- Secret of OIDC client (application) secret key
    oidcClientSecret: "oidc-client-secret"
  # The name of Auth LDAP existing secret
  authLdapCredentials:
    # -- Name of existing secret containing LDAP credentials
    existingSecret: "auth-ldap-secret"
    # -- Password for bind user secret key
    ldapBindingPassword: "bind-password"
  # The name of DB Credentials existing secret
  dbCredentials:
    # -- Name of existing secret containing DB credentials
    existingSecret: "homarr-secrets"
    # -- Secret key for SECRET_ENCRYPTION_KEY
    # can be generated with `openssl rand -hex 32`
    dbEncryptionKey: "db-encryption-key"
    # -- Secret key for DB_URL
    # Example for internal database: `mysql://username:password@homarr-mysql:3306/homarrdb`
    #dbUrlKey: "db-url"
    # -- Secret key for DB_PASSWORD
    #dbPasswordKey: "mysql-root-password"
    # -- Secret key for database user
    #dbUserPasswordKey: "mysql-password"

# -- Pod annotations
podAnnotations: {}
# -- Pod labels
podLabels: {}

# Service configuration
service:
  # -- Enable service
  enabled: true
  # -- Service type
  type: ClusterIP
  ports:
    app:
      # -- Service port
      port: 7575
      # -- Service target port
      targetPort: http
      # -- Service protocol
      protocol: TCP
  # -- Defines how the service assigns IP families (IPv4/IPv6)
  # Possible values:
  # - SingleStack (default): Only one IP family, usually IPv4
  # - PreferDualStack: Use dual-stack if the cluster supports it, fallback to single
  # - RequireDualStack: Fail if dual-stack cannot be assigned
  ipFamilyPolicy: SingleStack
  # -- List of IP families to use for the service.
  # Examples:
  # - ["IPv4"]
  # - ["IPv6"]
  # - ["IPv4", "IPv6"] for dual-stack
  # Leave empty to use cluster default behavior
  ipFamilies: []

livenessProbe:
  httpGet:
    # -- This is the liveness check endpoint used by Kubernetes to determine if the application is still running.
    path: /api/health/live
    # -- The port on which the liveness check will be performed. This must be the same as the container port exposed by the application.
    port: 7575

readinessProbe:
  httpGet:
    # -- This is the readiness check endpoint used by Kubernetes to determine if the application is ready to handle traffic.
    path: /api/health/ready
    # -- The port on which the readiness check will be performed. This must match the container's exposed port.
    port: 7575

# -- containerPorts defines the ports to open on the container. It is a map where each entry specifies:
#    - `port`     (int)    (required): The port number to expose inside the container.
#    - `protocol` (string) (required): The network protocol (TCP or UDP) used for the port.
#    - `disabled` (bool)              : Optional flag to disable this port (defaults to false). Can be overridden via Helm values.
#
# By default, this configuration exposes TCP port 7575 with the name `http`.
containerPorts:
  http:
    port: 7575
    protocol: TCP

# -- Resource configuration
resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
#   memory: 128Mi

# Autoscaling configuration
autoscaling:
  # -- Enable autoscaling
  enabled: false
  # -- Minimum replicas
  minReplicas: 1
  # -- Maximum replicas
  maxReplicas: 100
  # -- Target CPU utilization for autoscaling
  targetCPUUtilizationPercentage: 80
  # -- Target Memory utilization for autoscaling
  # targetMemoryUtilizationPercentage: 80
# -- Additional volumes on the output Deployment definition.

# Persistent storage configuration
persistence:
  homarrDatabase:
    # -- Enable homarr-database persistent storage
    enabled: true
    # -- homarr-database persistent storage name
    name: "homarr-database"
    # -- homarr-database storage class name
    storageClassName: "longhorn"
    # -- homarr-database access mode
    accessMode: "ReadWriteOnce"
    # -- homarr-database storage size
    size: "50Mi"
    # -- homarr-database mount path inside the pod
    mountPath: "/appdata"
    # -- homarr-database optional volumeClaimName to target specific PV
    volumeClaimName: ""
  homarrTrustedCerts:
    # -- Enable trusted certificates persistence
    enabled: false
    # -- Persistence mode can be : configmap (declarative), secret (declarative) or existingSecret (mount an existing Kubernetes Secret by name and specify which keys to mount as files)
    type: configmap
    # -- Name of the existing Kubernetes Secret to mount (required if type is "existingSecret")
    existingSecretName: ""
    # -- List of keys (filenames) to mount from the existing secret (used only when type is "existingSecret")
    existingSecretKeys:
      # - cert3.crt
      # - cert4.crt
    # -- homarr-trusted-certificates  mount path inside the pod
    mountPath: "/appdata/trusted-certificates"

# -- Enable and configure Mysql database subchart under this key.
#    For more options see [Mysql chart documentation](https://github.com/bitnami/charts/tree/main/bitnami/mysql)
# @default -- See [values.yaml](https://github.com/homarr-labs/charts/blob/dev/charts/homarr/values.yaml)
mysql:
  internal: false
  auth:
    existingSecret: "homarr-secrets"
    username: homarr
    database: homarrdb
